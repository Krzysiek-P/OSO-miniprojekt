# .github/workflows/devsecops.yml
name: DevSecOps Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image (if using custom Dockerfile)
        run: docker build -t juice-shop .

      - name: Run Trivy security scan (container image)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'bkimminich/juice-shop:latest'  # lub 'juice-shop' jeśli budujesz
          format: 'table'
          exit-code: '1'
          severity: 'HIGH,CRITICAL'
      - name: Upload Trivy report
        uses: actions/upload-artifact@v3
        with:
          name: trivy-report
          path: trivy-report.txt
  sca-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: SCA Scan with OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Juice-Shop'
          format: 'HTML'
          fail_on_severity: 'HIGH'
  sast-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: SAST Scan with Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/owasp-juice-shop  # Gotowa reguła dla Juice Shop
          severity: 'ERROR'
  secrets-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Secrets Scan with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          severity-level: 'high'
  dast-scan:
    runs-on: ubuntu-latest
    services:
      juice-shop:
        image: bkimminich/juice-shop:latest
        ports:
          - 3000:3000
    steps:
      - uses: actions/checkout@v4
      - name: DAST Scan with OWASP ZAP
        uses: zaproxy/action-full-scan@v0.2.0
        with:
          target: 'http://juice-shop:3000'
          rules_file_name: 'rules.rss'  # Opcjonalne reguły

